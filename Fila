import random

a = 1664525
c = 1013904223
M = 2**32
seed = 42

def NextRandom():
    global seed
    seed = (a * seed + c) % M
    return seed / M  # Normalizando entre 0 e 1

class FilaSimples:
    def __init__(self, servidores, capacidade):
        self.servidores = servidores
        self.capacidade = capacidade
        self.fila = []
        self.tempo = 0
        self.num_clientes_perdidos = 0
        self.tempo_por_estado = {i: 0 for i in range(capacidade + 1)}
        self.ultimo_tempo = 0
    
    def chegada(self):
        interarrival_time = 2 + (3 * NextRandom())  # Tempo entre 2 e 5
        self.tempo += interarrival_time
        if len(self.fila) < self.capacidade:
            self.fila.append(self.tempo)
        else:
            self.num_clientes_perdidos += 1
        self.atualizar_estados()

    def saida(self):
        if self.fila and len(self.fila) > 0:
            atendimento_time = 3 + (2 * NextRandom())  # Tempo entre 3 e 5
            self.tempo += atendimento_time
            for _ in range(min(self.servidores, len(self.fila))):
                self.fila.pop(0)
        self.atualizar_estados()
    
    def atualizar_estados(self):
        estado = len(self.fila)
        self.tempo_por_estado[estado] += self.tempo - self.ultimo_tempo
        self.ultimo_tempo = self.tempo
    
    def rodar_simulacao(self, eventos):
        self.tempo = 2.0  # Primeiro cliente chega no tempo 2.0
        while eventos > 0:
            if NextRandom() < 0.5:
                self.chegada()
            else:
                self.saida()
            eventos -= 1
        self.exibir_resultados()
    
    def exibir_resultados(self):
        print(f"\nSimulação G/G/{self.servidores}/{self.capacidade}")
        print(f"Clientes perdidos: {self.num_clientes_perdidos}")
        print(f"Tempo global da simulação: {self.tempo:.2f}")
        print("Distribuição de probabilidade dos estados da fila:")
        total_time = self.tempo
        for estado, tempo in self.tempo_por_estado.items():
            prob = tempo / total_time if total_time > 0 else 0
            print(f"Estado {estado}: {prob:.4f}")

fila_gg1_5 = FilaSimples(servidores=1, capacidade=5)
fila_gg1_5.rodar_simulacao(eventos=100000)

fila_gg2_5 = FilaSimples(servidores=2, capacidade=5)
fila_gg2_5.rodar_simulacao(eventos=100000)
